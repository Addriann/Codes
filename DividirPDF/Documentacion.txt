Explicación del código.

La primera línea importa la biblioteca tkinter, que es una biblioteca de Python para crear interfaces gráficas de usuario (GUI). La segunda línea importa la biblioteca os, que proporciona funciones y métodos para interactuar con el sistema operativo. La tercera línea importa el módulo filedialog de la biblioteca tkinter, que permite mostrar ventanas de diálogo para seleccionar archivos y carpetas. La cuarta línea importa la biblioteca PyPDF2, que permite leer y modificar archivos en formato PDF.

La siguiente línea crea la ventana principal de la interfaz gráfica de usuario utilizando la clase Tk de tkinter. Luego, se llama al método withdraw de la ventana principal para ocultarla, ya que no se mostrará en la pantalla.

La siguiente línea muestra una ventana de diálogo para seleccionar un archivo utilizando el método askopenfilename del módulo filedialog, y guarda la ruta del archivo seleccionado en la variable file_path.

La siguiente línea abre el archivo seleccionado en modo de lectura binaria ('rb') y crea un contexto de gestión de archivos utilizando la palabra clave with. Dentro del contexto, se crea un objeto pdf de la clase PdfFileReader de PyPDF2, pasando como argumento el archivo abierto. Esto permite leer el contenido del archivo PDF.

Luego, se muestra otra ventana de diálogo para seleccionar una carpeta utilizando el método askdirectory del módulo filedialog, y se guarda la ruta de la carpeta seleccionada en la variable ruta_destino. A continuación, se solicita al usuario que ingrese el tamaño deseado para cada archivo de salida utilizando la función input y se guarda en la variable tamaño.

A continuación, se calcula cuántos archivos se deben crear para dividir el archivo PDF original en archivos más pequeños utilizando el método getNumPages de pdf para obtener la cantidad de páginas del archivo original, y luego se divide entre el tamaño deseado para cada archivo de salida. Si el resultado de la división no es un entero, se suma 1 al resultado para incluir el resto de páginas que no se pueden dividir en archivos completos.

A continuación, se inicia un ciclo for que iterará sobre un rango de números desde 0 hasta cantidad_archivos. En cada iteración, se calculará el rango de páginas que se incluirán en el archivo de salida actual. Para ello, se utiliza el índice de iteración i para calcular el inicio y el fin del rango. El inicio del rango se calcula como i * tamaño + 1 y el fin como (i + 1) * tamaño. Si el fin del rango es mayor que la cantidad de páginas del archivo original, se establece el fin del rango en el número de páginas del archivo original.

Dentro del ciclo for, se crea un objeto output_pdf de la clase PdfFileWriter de PyPDF2, que se utilizará para crear un nuevo archivo PDF en cada iteración.

A continuación, se inicia otro ciclo for que iterará sobre un rango de números desde el inicio hasta el fin del rango de páginas para el archivo de salida actual. En cada iteración, se obtiene la página del archivo original utilizando el método getPage de pdf y se agrega al nuevo archivo output_pdf utilizando el método addPage.

Una vez que se han agregado todas las páginas del rango al nuevo archivo, se crea el nombre del archivo de salida utilizando una cadena con formato y se guarda en la variable output_name.

A continuación, se abre un nuevo archivo en modo de escritura binaria ('wb') en la ruta de destino especificada y se crea un contexto de gestión de archivos. Dentro del contexto, se utiliza el método write de output_pdf para escribir el contenido del nuevo archivo PDF en el archivo de salida.

Una vez que se han creado todos los archivos de salida, se utiliza la función startfile de la biblioteca os para abrir la carpeta donde se encuentran los archivos.
